import { type APIConnectOptions, voice } from '@livekit/agents';
import type { Room } from '@livekit/rtc-node';
/**
 * Exception thrown when there are errors with the Beyond Presence API.
 */
export declare class BeyException extends Error {
    constructor(message: string);
}
/**
 * Options for configuring an AvatarSession.
 */
export interface AvatarSessionOptions {
    /**
     * The avatar ID to use. If not provided, defaults to a stock avatar.
     */
    avatarId?: string | null;
    /**
     * The Beyond Presence API URL. Defaults to https://api.bey.dev or BEY_API_URL environment variable.
     */
    apiUrl?: string;
    /**
     * The Beyond Presence API key. Can also be set via BEY_API_KEY environment variable.
     */
    apiKey?: string;
    /**
     * The identity of the avatar participant in the room. Defaults to 'bey-avatar-agent'.
     */
    avatarParticipantIdentity?: string;
    /**
     * The name of the avatar participant in the room. Defaults to 'bey-avatar-agent'.
     */
    avatarParticipantName?: string;
    /**
     * Connection options for API requests.
     */
    connOptions?: APIConnectOptions;
}
/**
 * Options for starting an avatar session.
 */
export interface StartOptions {
    /**
     * LiveKit server URL. Falls back to LIVEKIT_URL environment variable.
     */
    livekitUrl?: string;
    /**
     * LiveKit API key. Falls back to LIVEKIT_API_KEY environment variable.
     */
    livekitApiKey?: string;
    /**
     * LiveKit API secret. Falls back to LIVEKIT_API_SECRET environment variable.
     */
    livekitApiSecret?: string;
}
/**
 * A Beyond Presence avatar session.
 *
 * This class manages the connection between a LiveKit agent and a Beyond Presence avatar,
 * routing agent audio output to the avatar for visual representation.
 *
 * @example
 * ```typescript
 * const avatar = new AvatarSession({
 *   avatarId: 'your-avatar-id',
 *   apiKey: 'your-bey-api-key',
 * });
 * await avatar.start(agentSession, room);
 * ```
 */
export declare class AvatarSession {
    #private;
    private avatarId;
    private apiUrl;
    private apiKey;
    private avatarParticipantIdentity;
    private avatarParticipantName;
    private connOptions;
    /**
     * Creates a new AvatarSession.
     *
     * @param options - Configuration options for the avatar session
     * @throws BeyException if BEY_API_KEY is not set
     */
    constructor(options?: AvatarSessionOptions);
    /**
     * Starts the avatar session and connects it to the agent.
     *
     * This method:
     * 1. Creates a LiveKit token for the avatar participant
     * 2. Calls the Beyond Presence API to start the avatar session
     * 3. Configures the agent's audio output to stream to the avatar
     *
     * @param agentSession - The agent session to connect to the avatar
     * @param room - The LiveKit room where the avatar will join
     * @param options - Optional LiveKit credentials (falls back to environment variables)
     * @throws BeyException if LiveKit credentials are not available or if the avatar session fails to start
     */
    start(agentSession: voice.AgentSession, room: Room, options?: StartOptions): Promise<void>;
    private startAgent;
}
//# sourceMappingURL=avatar.d.ts.map