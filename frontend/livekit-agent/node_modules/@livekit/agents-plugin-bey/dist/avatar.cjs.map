{"version":3,"sources":["../src/avatar.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport {\n  type APIConnectOptions,\n  APIConnectionError,\n  APIStatusError,\n  DEFAULT_API_CONNECT_OPTIONS,\n  getJobContext,\n  voice,\n} from '@livekit/agents';\nimport type { Room } from '@livekit/rtc-node';\nimport { TrackKind } from '@livekit/rtc-node';\nimport type { VideoGrant } from 'livekit-server-sdk';\nimport { AccessToken } from 'livekit-server-sdk';\nimport { log } from './log.js';\n\nconst ATTRIBUTE_PUBLISH_ON_BEHALF = 'lk.publish_on_behalf';\n\nconst STOCK_AVATAR_ID = '694c83e2-8895-4a98-bd16-56332ca3f449';\nconst DEFAULT_API_URL = 'https://api.bey.dev';\nconst AVATAR_AGENT_IDENTITY = 'bey-avatar-agent';\nconst AVATAR_AGENT_NAME = 'bey-avatar-agent';\n\n/**\n * Exception thrown when there are errors with the Beyond Presence API.\n */\nexport class BeyException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BeyException';\n  }\n}\n\n/**\n * Options for configuring an AvatarSession.\n */\nexport interface AvatarSessionOptions {\n  /**\n   * The avatar ID to use. If not provided, defaults to a stock avatar.\n   */\n  avatarId?: string | null;\n  /**\n   * The Beyond Presence API URL. Defaults to https://api.bey.dev or BEY_API_URL environment variable.\n   */\n  apiUrl?: string;\n  /**\n   * The Beyond Presence API key. Can also be set via BEY_API_KEY environment variable.\n   */\n  apiKey?: string;\n  /**\n   * The identity of the avatar participant in the room. Defaults to 'bey-avatar-agent'.\n   */\n  avatarParticipantIdentity?: string;\n  /**\n   * The name of the avatar participant in the room. Defaults to 'bey-avatar-agent'.\n   */\n  avatarParticipantName?: string;\n  /**\n   * Connection options for API requests.\n   */\n  connOptions?: APIConnectOptions;\n}\n\n/**\n * Options for starting an avatar session.\n */\nexport interface StartOptions {\n  /**\n   * LiveKit server URL. Falls back to LIVEKIT_URL environment variable.\n   */\n  livekitUrl?: string;\n  /**\n   * LiveKit API key. Falls back to LIVEKIT_API_KEY environment variable.\n   */\n  livekitApiKey?: string;\n  /**\n   * LiveKit API secret. Falls back to LIVEKIT_API_SECRET environment variable.\n   */\n  livekitApiSecret?: string;\n}\n\n/**\n * A Beyond Presence avatar session.\n *\n * This class manages the connection between a LiveKit agent and a Beyond Presence avatar,\n * routing agent audio output to the avatar for visual representation.\n *\n * @example\n * ```typescript\n * const avatar = new AvatarSession({\n *   avatarId: 'your-avatar-id',\n *   apiKey: 'your-bey-api-key',\n * });\n * await avatar.start(agentSession, room);\n * ```\n */\nexport class AvatarSession {\n  private avatarId: string;\n  private apiUrl: string;\n  private apiKey: string;\n  private avatarParticipantIdentity: string;\n  private avatarParticipantName: string;\n  private connOptions: APIConnectOptions;\n\n  #logger = log();\n\n  /**\n   * Creates a new AvatarSession.\n   *\n   * @param options - Configuration options for the avatar session\n   * @throws BeyException if BEY_API_KEY is not set\n   */\n  constructor(options: AvatarSessionOptions = {}) {\n    this.avatarId = options.avatarId || STOCK_AVATAR_ID;\n    this.apiUrl = options.apiUrl || process.env.BEY_API_URL || DEFAULT_API_URL;\n    this.apiKey = options.apiKey || process.env.BEY_API_KEY || '';\n\n    if (!this.apiKey) {\n      throw new BeyException(\n        'The api_key must be set either by passing apiKey to the client or ' +\n          'by setting the BEY_API_KEY environment variable',\n      );\n    }\n\n    this.avatarParticipantIdentity = options.avatarParticipantIdentity || AVATAR_AGENT_IDENTITY;\n    this.avatarParticipantName = options.avatarParticipantName || AVATAR_AGENT_NAME;\n    this.connOptions = options.connOptions || DEFAULT_API_CONNECT_OPTIONS;\n  }\n\n  /**\n   * Starts the avatar session and connects it to the agent.\n   *\n   * This method:\n   * 1. Creates a LiveKit token for the avatar participant\n   * 2. Calls the Beyond Presence API to start the avatar session\n   * 3. Configures the agent's audio output to stream to the avatar\n   *\n   * @param agentSession - The agent session to connect to the avatar\n   * @param room - The LiveKit room where the avatar will join\n   * @param options - Optional LiveKit credentials (falls back to environment variables)\n   * @throws BeyException if LiveKit credentials are not available or if the avatar session fails to start\n   */\n  async start(\n    agentSession: voice.AgentSession,\n    room: Room,\n    options: StartOptions = {},\n  ): Promise<void> {\n    const livekitUrl = options.livekitUrl || process.env.LIVEKIT_URL;\n    const livekitApiKey = options.livekitApiKey || process.env.LIVEKIT_API_KEY;\n    const livekitApiSecret = options.livekitApiSecret || process.env.LIVEKIT_API_SECRET;\n\n    if (!livekitUrl || !livekitApiKey || !livekitApiSecret) {\n      throw new BeyException(\n        'livekitUrl, livekitApiKey, and livekitApiSecret must be set ' +\n          'by arguments or environment variables',\n      );\n    }\n\n    let localParticipantIdentity: string;\n    try {\n      const jobCtx = getJobContext();\n      localParticipantIdentity = jobCtx.job.participant?.identity || '';\n      if (!localParticipantIdentity && room.localParticipant) {\n        localParticipantIdentity = room.localParticipant.identity;\n      }\n    } catch (e) {\n      if (!room.isConnected || !room.localParticipant) {\n        throw new BeyException('failed to get local participant identity');\n      }\n      localParticipantIdentity = room.localParticipant.identity;\n    }\n\n    const at = new AccessToken(livekitApiKey, livekitApiSecret, {\n      identity: this.avatarParticipantIdentity,\n      name: this.avatarParticipantName,\n    });\n\n    at.addGrant({\n      roomJoin: true,\n      room: room.name,\n    } as VideoGrant);\n\n    // allow the avatar agent to publish audio and video on behalf of your local agent\n    at.attributes = {\n      [ATTRIBUTE_PUBLISH_ON_BEHALF]: localParticipantIdentity,\n    };\n\n    const livekitToken = await at.toJwt();\n\n    this.#logger.debug('starting avatar session');\n    await this.startAgent(livekitUrl, livekitToken);\n\n    agentSession.output.audio = new voice.DataStreamAudioOutput({\n      room,\n      destinationIdentity: this.avatarParticipantIdentity,\n      waitRemoteTrack: TrackKind.KIND_VIDEO,\n    });\n  }\n\n  private async startAgent(livekitUrl: string, livekitToken: string): Promise<void> {\n    for (let i = 0; i < this.connOptions.maxRetry; i++) {\n      try {\n        const response = await fetch(`${this.apiUrl}/v1/session`, {\n          method: 'POST',\n          headers: {\n            'x-api-key': this.apiKey,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            avatar_id: this.avatarId,\n            livekit_url: livekitUrl,\n            livekit_token: livekitToken,\n          }),\n          signal: AbortSignal.timeout(this.connOptions.timeoutMs),\n        });\n\n        if (!response.ok) {\n          const text = await response.text();\n          throw new APIStatusError({\n            message: 'Server returned an error',\n            options: { statusCode: response.status, body: { error: text } },\n          });\n        }\n        return;\n      } catch (e) {\n        if (e instanceof APIConnectionError) {\n          this.#logger.warn({ error: String(e) }, 'failed to call bey presence api');\n        } else {\n          this.#logger.error({ error: e }, 'failed to call bey presence api');\n        }\n\n        if (i < this.connOptions.maxRetry - 1) {\n          await new Promise((resolve) =>\n            setTimeout(resolve, this.connOptions._intervalForRetry(i)),\n          );\n        }\n      }\n    }\n\n    throw new APIConnectionError({\n      message: 'Failed to start Bey Avatar Session after all retries',\n    });\n  }\n}\n"],"mappings":"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","names":[]}